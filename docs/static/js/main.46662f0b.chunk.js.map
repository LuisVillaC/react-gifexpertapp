{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","undefined","find","heroe","htmlFor","type","name","value","id","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","setTimeout","then","imgs","useFetchGifs","key","GitExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAEaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAsB5C,OACI,0BAAMC,SAjBW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAEV,YAAgDC,IAA7CD,EAAKE,MAAK,SAAEC,GAAF,OAAWA,IAAUV,KACxB,CAAEA,GAAR,mBAAsBO,IAEf,YAAIA,MAInBN,EAAc,OAMd,2BAAOU,QAAQ,IAAf,aACA,2BACIC,KAAK,OACLC,KAAK,MACLC,MAAOd,EACPe,GAAG,QACHC,SA3BQ,SAACb,GACjBF,EAAcE,EAAEc,OAAOH,Y,uBCLlBI,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,4DACJ,mCACTC,EAFa,iDAEoCC,UAAUH,GAF9C,oBACJ,mCADI,+CAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACvB,MAAO,CACHd,GAAGc,EAAId,GACPe,MAAMD,EAAIC,MACVT,IAAG,UAACQ,EAAIE,cAAL,aAAC,EAAYC,iBAAiBX,QATtB,kBAaZM,GAbY,4CAAH,sDCCdM,EAAc,SAAC,GAAqB,EAAnBlB,GAAoB,IAAjBe,EAAgB,EAAhBA,MAAMT,EAAU,EAAVA,IAE5B,OACI,yBAAKa,UAAU,2CACX,yBAAKC,IAAKd,EAAKe,IAAMN,MCA3BO,EAAU,SAAC,GAAgB,IAAflB,EAAc,EAAdA,SAAc,ECHJ,SAACA,GAAc,IAAD,EAEZpB,mBAAS,CAC/B2B,KAAK,GACLY,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAoBtC,OAbAC,qBAAU,WACPC,YAAW,WACNxB,EAAQC,GAAUwB,MAAK,SAAAC,GACnBJ,EAAS,CACLd,KAAKkB,EACLN,SAAS,SAInB,OACH,CAACnB,IAGGoB,EDTuBM,CAAa1B,GAA/BY,EARgB,EAQrBL,KAAYY,EARS,EAQTA,QAEnB,OACI,oCACI,4BAAMnB,GACLmB,GAAU,wBAAIJ,UAAU,oCAAd,YACX,yBAAKA,UAAU,aAEHH,EAAOH,KAAI,SAACC,GAAD,OACP,kBAAC,EAAD,eACAiB,IAAKjB,EAAId,IACLc,UErB1BkB,EAAe,WAAK,IAAD,EAEehD,mBAAS,IAFxB,mBAEdiD,EAFc,KAEFlD,EAFE,KAUrB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BACA,4BAEQkD,EAAWpB,KAAI,SAACT,GAAD,OACX,kBAAC,EAAD,CACI2B,IAAK3B,EACLA,SAAYA,UClBxC8B,IAASC,OAEL,kBAAE,EAAF,MAEFC,SAASC,eAAe,U","file":"static/js/main.46662f0b.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nexport const AddCategory = ({setCategories}) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('')\r\n    const handleChange =(e)=>{\r\n        setInputValue(e.target.value);\r\n    }\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n        if(inputValue.trim().length>2){\r\n            setCategories(cats=>{\r\n                \r\n                if(cats.find(( heroe)=> heroe === inputValue)===undefined){\r\n                    return [inputValue,...cats];\r\n                }else{\r\n                    return [...cats]\r\n                }\r\n            }\r\n            );\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <label htmlFor=\"\">Agregar: </label>\r\n            <input \r\n                type=\"text\" \r\n                name=\"add\" \r\n                value={inputValue}\r\n                id=\"nueva\"\r\n                onChange={handleChange}\r\n            />  \r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes={\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\nexport const getGifs = async(category) =>{\r\n    const apiKey = \"pofXeUiZ6aI5pDrymWwmn9UMy9Y0heEt\";\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&api_key=${apiKey}&limit=6&offset=0&rating=g&lang=en`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    const gifs = data.map(img=>{\r\n        return {\r\n            id:img.id,\r\n            title:img.title,\r\n            url:img.images?.downsized_medium.url\r\n        }\r\n        \r\n    })\r\n    return gifs;\r\n\r\n}\r\n","import React from 'react'\r\n\r\nconst GifGridItem = ( {id,title,url} ) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn \">\r\n            <img src={url} alt={ title }/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport{\r\n    GifGridItem\r\n}","// import React, { useState, useEffect } from 'react'\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nconst GifGrid = ({category}) => {\r\n    // forma 1\r\n    // const [images, setImages] = useState([])\r\n\r\n    // useEffect( () => {\r\n    //     getGifs(category).then(imgs=>setImages(imgs))\r\n    // },[category]);\r\n    // Forma 2 con custom hooks\r\n    const {data:images,loading} = useFetchGifs(category);\r\n    \r\n    return (\r\n        <>\r\n            <h3>{ category }</h3>\r\n            {loading&& <h5 className=\"animate__animated animate__flash\">Cargando</h5>}\r\n            <div className=\"card-grid\">\r\n                    {\r\n                        images.map((img)=>(\r\n                            <GifGridItem \r\n                            key={img.id}\r\n                            {...img}  />                        \r\n                        ))\r\n                        \r\n                    }\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport{\r\n    GifGrid\r\n} \r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\"\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n       setTimeout(() => {\r\n            getGifs(category).then(imgs=>{\r\n                setstate({\r\n                    data:imgs,\r\n                    loading: false\r\n                });\r\n\r\n            })\r\n       }, 200);\r\n    }, [category])\r\n\r\n    \r\n    return state\r\n}\r\n","import React, { useState } from  'react'\r\nimport { AddCategory } from './AddCategory';\r\nimport { GifGrid } from './GifGrid';\r\n\r\nconst GitExpertApp = ()=>{\r\n\r\n    const [categories, setCategories] = useState([])\r\n    // const handleAdd = ()=>{\r\n    //     const nuevo = document.getElementById(\"nueva\");\r\n    //     // setCategories([...categories,nuevo.value]);\r\n    //     // Forma con callback\r\n    //     setCategories(cats=>[...categories,nuevo.value]);\r\n\r\n    // }\r\n    return(\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr />            \r\n            <ol>\r\n                { \r\n                    categories.map((category)=>(\r\n                        <GifGrid \r\n                            key={category} \r\n                            category = {category}\r\n                        />\r\n                    \r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport{\r\n    GitExpertApp\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GitExpertApp } from './components/GifExpertApp'\n\n\nReactDOM.render(\n  // <React.StrictMode>\n    < GitExpertApp />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}